[project]
name = "vibesafe"
version = "0.1.3"
description = "Vibe safely"
readme = "README.md"
authors = [
    { name = "Claude", email = "noreply@anthropic.com" }
]
requires-python = ">=3.12"
dependencies = [
    "jinja2>=3.1.0",
    "tomli>=2.0.0; python_version < '3.11'",
    "openai>=1.0.0",
    "fastapi>=0.115.0",
    "pydantic>=2.8.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "httpx>=0.27.0",
]

[dependency-groups]
dev = [
    "poethepoet>=0.37.0",
    "ty>=0.0.1a25",
    "pytest>=8.0.0",
    "pytest-xdist>=3.5.0",  # Parallel test execution
    "pytest-cov>=5.0.0",     # Coverage reporting
    "pytest-mock>=3.14.0",   # Mocking support
    "pytest-asyncio>=0.23.0", # Async test support
    "pytest-timeout>=2.3.0",  # Test timeouts
    "mypy>=1.11.0",
    "ruff>=0.6.0",
    "pyright>=1.1.0",
    "anyio>=4.0.0",          # For async examples
    "hypothesis>=6.100.0",
]

[tool.ty.src]
exclude = [
    "examples/",
    "docs/",
    "benchmarks/",
    "test_*.py",
    "tests/",  # Ignore type checking in tests for dynamic stubs/mocks
]

[tool.ty.rules]
unused-ignore-comment = "ignore"
redundant-cast = "ignore"
possibly-missing-attribute = "ignore"   # TODO: Change to "error"
possibly-missing-import = "ignore"      # TODO: Change to "error"
possibly-missing-implicit-call = "ignore"      # TODO: Change to "error"

[project.scripts]
vibesafe = "vibesafe.cli:main"
vibe = "vibesafe.cli:main"

[build-system]
requires = ["uv_build>=0.8.17,<0.9.0"]
build-backend = "uv_build"

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
norecursedirs = ["src", ".git", ".venv", "__pycache__", "*.egg-info"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=src/vibesafe",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async",
]

[tool.coverage.run]
source = ["src/vibesafe"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.12"
strict = false
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = false
show_error_codes = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*"]
ignore_errors = true

[tool.ruff]
target-version = "py312"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip strict parameter
    "UP036",  # outdated version block (we support 3.12+ but keep for compatibility)
    "SIM105",  # contextlib.suppress suggestion (preference)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*.py" = ["ARG", "S101", "F841", "E721"]  # Allow unused args, asserts, vars in tests
"test_*.py" = ["ARG", "S101", "F841", "E721"]  # Allow unused args, asserts, vars in tests
"examples/**/*.py" = ["ARG", "F841"]  # Allow unused args and vars in example specs
"src/vibesafe/mcp.py" = ["ARG002"]  # MCP handlers require params even if unused

[tool.poe.tasks]
lint = "ruff check --fix --unsafe-fixes"
format = "ruff format"
typecheck = "ty src/vibesafe"
test = "pytest"
check = [
  "format",
  "lint",
  "typecheck"
]
